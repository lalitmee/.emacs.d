;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(ido-buffer-history ivy-history extended-command-history swiper-history file-name-history))
(setq ido-buffer-history '("base.html.twig" "awesome.py"))
(setq ivy-history '("init.el" "*scratch*" #("smart-mo" 0 8 (ivy-index 0)) #("winner" 0 6 (ivy-index 0)) #("ze" 0 2 (ivy-index 0))))
(setq extended-command-history '(#("^package-install" 0 16 (ivy-index 3)) #("^pa" 0 3 (ivy-index 0)) #("^try" 0 4 (ivy-index 1)) #("^pac" 0 4 (ivy-index 0)) #("^pack" 0 5 (ivy-index 0)) #("^loa" 0 4 (ivy-index 1))))
(setq swiper-history '(#("counsel" 0 7 (ivy-index 15)) #("hist" 0 4 (ivy-index 1)) #("drac" 0 4 (ivy-index 1))))
(setq file-name-history '(#("/home/lalit/Desktop/Github/HTML Project/Templates/CV-Website/Project/ThomasConnolly/ThomasConnolly/Views/" 0 105 (ivy-index 1)) #("/home/lalit/Desktop/CRUD-Symfony/app/Resources/" 0 47 (ivy-index 1)) #("/home/lalit/" 0 12 (ivy-index 2)) #("/home/lalit/Desktop/Programming/Python/awesome.py" 0 49 (ivy-index 16)) #("/home/lalit/.emacs.d/init.el" 0 28 (ivy-index 0)) "~/Desktop/Parallel_Programming_Lab/pthread_hello.c" "~/Desktop/Programming/Python/a.py" "~/.emacs.d/init.el" "~/.emacs.d/elpa/all-the-icons-20170817.642/all-the-icons-autoloads.el" "~/.emacs.d/elpa/font-lock+-20170222.1755/font-lock+-autoloads.el" "~/.emacs.d/elpa/memoize-20170720.1802/memoize-autoloads.el" "~/Desktop/Programming/Python/test.py"))
(setq kill-ring '(#("base.html.twig" 0 14 (dired-filename t mouse-face highlight help-echo "mouse-2: visit this file in other window" fontified t)) #("mport *" 0 5 (fontified t face font-lock-keyword-face) 5 7 (fontified t)) "(defun my-web-mode-hook ()
  (setq web-mode-enable-auto-pairing nil))

(add-hook 'web-mode-hook  'my-web-mode-hook)

(defun sp-web-mode-is-code-context (id action context)
  (and (eq action 'insert)
       (not (or (get-text-property (point) 'part-side)
                (get-text-property (point) 'block-side)))))

(sp-local-pair 'web-mode \"<\" nil :when '(sp-web-mode-is-code-context))" "(add-hook 'local-write-file-hooks
            (lambda ()
               (delete-trailing-whitespace)
               nil))" "(setq web-mode-ac-sources-alist
  '((\"php\" . (ac-source-yasnippet ac-source-php-auto-yasnippets))
    (\"html\" . (ac-source-emmet-html-aliases ac-source-emmet-html-snippets))
    (\"css\" . (ac-source-css-property ac-source-emmet-css-snippets))))

(add-hook 'web-mode-before-auto-complete-hooks
          '(lambda ()
             (let ((web-mode-cur-language
                    (web-mode-language-at-pos)))
               (if (string= web-mode-cur-language \"php\")
                   (yas-activate-extra-mode 'php-mode)
                 (yas-deactivate-extra-mode 'php-mode))
               (if (string= web-mode-cur-language \"css\")
                   (setq emmet-use-css-transform t)
                 (setq emmet-use-css-transform nil)))))" "(setq web-mode-ac-sources-alist
  '((\"css\" . (ac-source-css-property))
    (\"html\" . (ac-source-words-in-buffer ac-source-abbrev))))" "(setq web-mode-enable-current-element-highlight t)
" "(setq web-mode-enable-current-column-highlight t)" "(setq web-mode-enable-heredoc-fontification t)
" "(setq web-mode-enable-comment-keywords t)
" "(setq web-mode-enable-part-face t)
" "(setq web-mode-enable-block-face t)
" "(setq web-mode-enable-css-colorization t)" "(setq web-mode-enable-auto-pairing t)" "(setq web-mode-extra-auto-pairs
      '((\"erb\"  . ((\"beg\" \"end\")))
        (\"php\"  . ((\"beg\" \"end\")
                   (\"beg\" \"end\")))
       ))" "(setq web-mode-extra-snippets
      '((\"erb\" . ((\"toto\" . \"<% toto | %>\\n\\n<% end %>\")))
        (\"php\" . ((\"dowhile\" . \"<?php do { ?>\\n\\n<?php } while (|); ?>\")
                  (\"debug\" . \"<?php error_log(__LINE__); ?>\")))
       ))" "(set-face-attribute 'web-mode-css-rule-face nil :foreground \"Pink3\")
" "(setq web-mode-comment-style 2)
" "(setq web-mode-block-padding 0)
" "(setq web-mode-script-padding 1)
" "(setq web-mode-style-padding 1)
" "(setq web-mode-code-indent-offset 2)
" "(setq web-mode-css-indent-offset 2)
" "(setq web-mode-markup-indent-offset 2)
" "(use-package web-mode
    :ensure t
    :config
	 (add-to-list 'auto-mode-alist '(\"\\\\.html?\\\\'\" . web-mode))
	 (setq web-mode-engines-alist
	       '((\"django\"    . \"\\\\.html\\\\'\")))
	 (setq web-mode-ac-sources-alist
	       '((\"css\" . (ac-source-css-property))
		 (\"html\" . (ac-source-words-in-buffer ac-source-abbrev))))

(setq web-mode-enable-auto-closing t)
(setq web-mode-enable-auto-quoting t)) ; this fixes the quote problem I mentioned" "(use-package counsel
  :bind
  ((\"M-y\" . counsel-yank-pop)
   :map ivy-minibuffer-map
   (\"M-y\" . ivy-next-line)))" "(defun narrow-or-widen-dwim (p)
  \"Widen if buffer is narrowed, narrow-dwim otherwise.
Dwim means: region, org-src-block, org-subtree, or
defun, whichever applies first. Narrowing to
org-src-block actually calls `org-edit-src-code'.

With prefix P, don't widen, just narrow even if buffer
is already narrowed.\"
  (interactive \"P\")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
        ((region-active-p)
         (narrow-to-region (region-beginning)
                           (region-end)))
        ((derived-mode-p 'org-mode)
         ;; `org-edit-src-code' is not a real narrowing
         ;; command. Remove this first conditional if
         ;; you don't want it.
         (cond ((ignore-errors (org-edit-src-code) t)
                (delete-other-windows))
               ((ignore-errors (org-narrow-to-block) t))
               (t (org-narrow-to-subtree))))
        ((derived-mode-p 'latex-mode)
         (LaTeX-narrow-to-environment))
        (t (narrow-to-defun))))

(define-key endless/toggle-map \"n\"
  #'narrow-or-widen-dwim)
;; This line actually replaces Emacs' entire narrowing
;; keymap, that's how much I like this command. Only
;; copy it if that's what you want.
(define-key ctl-x-map \"n\" #'narrow-or-widen-dwim)
(add-hook 'LaTeX-mode-hook
          (lambda ()
            (define-key LaTeX-mode-map \"\\C-xn\"
              nil)))" "(use-package miniedit
  :commands minibuffer-edit
  :init (miniedit-install))" "(use-package smart-mode-line)" "(setq sentence-end-double-space nil)
" "(use-package winner
  :defer t)" "(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((\".*\" \"~/.emacs.d/auto-save-list/\" t)))" "(setq backup-directory-alist '((\".\" . \"~/.emacs.d/backups\")))" "(unless (assoc-default \"org\" package-archives)
  (add-to-list 'package-archives '(\"org\" . \"http://orgmode.org/elpa/\") t))" "(setq user-full-name \"Sacha Chua\"
      user-mail-address \"sacha@sachachua.com\")" "(setq savehist-file \"~/.emacs.d/savehist\")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))" "(display-time-mode 1)"))
(setq search-ring 'nil)
(setq regexp-search-ring '("counsel" "hist"))
